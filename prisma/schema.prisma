datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses a connection pool
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
  // Prisma ORM 7 will require a generator name https://pris.ly/cli/output-path
  // output   = "prisma-client" // Prisma Client will be generated in the `prisma-client` directory
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  savedInputs   InputForm[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Algorithm {
  fcfs
  sjf
  rr
  priority
}

enum Preemption {
  preemptive
  nonPreemptive
}

model InputForm {
  id                   String     @id @default(cuid())
  algorithmSelected    Algorithm
  preemption           Preemption
  arrivalValues        Int[]
  burstValues          Int[]
  priorityValues       Int[]
  timeQuantum          Int?
  uniqueConstraintHash String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([userId, uniqueConstraintHash])
  @@index([userId])
}
