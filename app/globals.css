@tailwind base;
@tailwind components;
@tailwind utilities;

/* Style for idle process */
.idle-stripes {
  background: repeating-linear-gradient(
    -55deg,
    #f7f7f7,
    #f7f7f7 10px,
    #fff 10px,
    #fff 20px
  );
}

/* Ready queue animation */
@keyframes readyQ-animation {
  from {
    width: 0px;
  }
  to {
    width: 40px;
  }
}

@keyframes hide-bar-container {
  from {
    width: 40px;
  }
  to {
    width: 0px;
  }
}

@keyframes fadeIn {
  0% {
    display: none;
    opacity: 0;
  }
  1% {
    display: block;
    opacity: 0;
  }
  100% {
    display: block;
    opacity: 1;
  }
}

/* Animation for the range number */
@keyframes fadeInNumbers {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

/* Width Animation for the processes */
@keyframes width-animation {
  from {
    width: 0%;
  }
  to {
    width: 100%;
  }
}

.data-item {
  flex: 2 1 0;
  overflow: hidden;
  white-space: nowrap;
  padding: 0 6px;
  display: flex;
  align-items: baseline;
  transition: background-color 0.2s ease-in-out;
}

.data-item:last-child {
  border-right: none;
}

.data-item-quantum {
  flex-grow: 1;
}

.data-item .label {
  font-size: 0.75rem;
  line-height: 1rem;
  margin-right: 4px;
  flex-shrink: 0;
}

.data-item .number-wrapper {
  overflow: hidden;
  flex-grow: 1;
  vertical-align: baseline;
  min-width: 10px;
}

.data-item .number-content {
  display: inline-block;
  white-space: nowrap;
  will-change: transform;
  cursor: default;
  --marquee-translate-x: 0px;
}

/* Marquee Animation */
@keyframes marquee {
  /* Start at the initial position */
  0% {
    transform: translateX(0%);
  }
  /* Add a pause at the beginning */
  2% {
    transform: translateX(0%);
  }
  /* Move to the calculated end position */
  80% {
    /* Use the CSS variable set by JavaScript */
    transform: translateX(var(--marquee-translate-x));
  }
  /* Pause at the end before looping */
  100% {
    transform: translateX(var(--marquee-translate-x));
  }
}

/* Apply hover background ONLY to the specific 
item being hovered IF it has the overflow class */
.data-item.is-item-overflowing:hover {
  background-color: #f0f0f0;
}

/* Apply animation ONLY to the number-content inside a 
hovered data-item IF that data-item has the overflow class */
.data-item.is-item-overflowing:hover .number-content {
  /* The animation always runs on hover IF the item overflows */
  /* It will only *move* if --marquee-translate-x is non-zero */
  animation: marquee 8s linear infinite;
  animation-delay: 0.5s;
}

/* Ensure no animation runs if the item is NOT overflowing, even on hover */
.data-item:not(.is-item-overflowing) .number-content {
  animation: none;
}

.errorMessages {
  margin-top: 0.5rem;
  font-size: 0.75rem;
  line-height: 1rem;
  color: red;
}

.process-bar-animation {
  animation-name: readyQ-animation, hide-bar-container;
  animation-duration: 0s, 0.2s;
  animation-timing-function: linear, linear;
  animation-iteration-count: 1, 1;
  animation-direction: normal, normal;
  animation-fill-mode: both, forwards;
  animation-play-state: running, running;
  animation-delay: var(--arrival-time-delay), var(--start-time-delay);
}

:root {
  /* Light Theme Gradient Colors */
  --gradient-color-start: #00a2e2;
  --gradient-color-end: #0000ff;
  --gradient-1-start: #001aff;
  --gradient-1-end: #6f00ff;
  --gradient-2-start: #ff008c;
  --gradient-2-end: #2b00ff;
  --gradient-3-start: #0d9fb3;
  --gradient-3-end: #ff003c;
}

::selection {
  color: #000000;
  background: #babcff;
}

@media (prefers-color-scheme: dark) {
  :root {
    /* Dark Theme Gradient Colors */
    --gradient-color-start: #3a7bd5;
    --gradient-color-end: #1e007c;
    --gradient-1-start: #001aff;
    --gradient-1-end: #6f00ff;
    --gradient-2-start: #ff008c;
    --gradient-2-end: #2b00ff;
    --gradient-3-start: #0d9fb3;
    --gradient-3-end: #ff003c;
  }
  ::selection {
    color: white;
    background: #4c52ff;
  }
  .data-item.is-item-overflowing:hover {
    background-color: #0000003b;
  }
  .errorMessages {
    color: #e61345;
  }
}

/* Background Gradients */
.gradient-layer-one::before,
.gradient-layer-one::after,
.gradient-layer-two::before,
.gradient-layer-two::after,
.gradient-layer-three::before,
.gradient-layer-three::after {
  content: "";
  position: absolute;
  z-index: -20;
  border-radius: 50%;
}

.gradient-layer-one::before {
  top: 1rem;
  width: 210px;
  height: 360px;
  left: 50%;
  transform: translateX(-30%);
  background: conic-gradient(var(--gradient-1-start), var(--gradient-1-end));
  filter: blur(2rem);
  opacity: 0.2;
}

.gradient-layer-one::after {
  top: 4rem;
  left: 50%;
  height: 180px;
  width: 240px;
  transform: translateX(-130%);
  background: conic-gradient(var(--gradient-2-start), var(--gradient-2-end));
  filter: blur(3rem);
  opacity: 0.4;
}

.gradient-layer-two,
.gradient-layer-three {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
}

.gradient-layer-two::before {
  top: 1rem;
  height: 300px;
  width: 216px;
  left: 50%;
  transform: translateX(-30%);
  background: conic-gradient(var(--gradient-3-start), var(--gradient-3-end));
  filter: blur(1rem);
  opacity: 0.1;
}

.gradient-layer-two::after {
  top: 1rem;
  width: 168px;
  height: 360px;
  left: 50%;
  transform: translateX(-30%);
  background: conic-gradient(
    var(--gradient-color-start),
    var(--gradient-color-end)
  );
  filter: blur(2rem);
  opacity: 0.2;
}

.gradient-layer-three::before {
  top: 4rem;
  left: 50%;
  height: 180px;
  width: 240px;
  transform: translateX(-130%);
  background: conic-gradient(
    var(--gradient-color-start),
    var(--gradient-color-end)
  );
  filter: blur(3rem);
  opacity: 0.4;
}

@media (min-width: 400px) {
  .gradient-layer-one::before,
  .gradient-layer-two::before,
  .gradient-layer-two::after {
    width: 280px;
  }
}

@media (min-width: theme("screens.sm")) {
  .gradient-layer-one::before,
  .gradient-layer-two::before,
  .gradient-layer-two::after {
    width: 480px;
  }
}
