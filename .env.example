# Copy this file to .env and fill in your actual values.

# PostgreSQL Connection Details
POSTGRES_USER="your_postgres_user"
POSTGRES_PASSWORD="your_postgres_password"
# POSTGRES_HOST="localhost"  # Uncomment for local development (if PostgreSQL is running directly on your machine)
POSTGRES_HOST="postgres"     # Default for Docker Compose (matches the service name in docker-compose.yml)
POSTGRES_DB="your_postgres_db_name" # e.g., "postgres" or your specific database name
POSTGRES_PORT="5432" # Default PostgreSQL port


# Auth.js Configuration
# See https://authjs.dev/guides/environment-variables
AUTH_SECRET="your_strong_random_secret_here" # IMPORTANT: Generate a strong secret for production.
                                             # You can use: `openssl rand -base64 32`
                                             # Or visit a site like https://generate-secret.vercel.app/32

# Application Environment
NODE_ENV="development" # e.g., "development", "test", or "production"

# Full Database Connection URL
# In production or when using a serverless database, ensure `?sslmode=require` is added at the end of the URL.
# Example for production/serverless: 
# DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=require"
# Example for local PostgreSQL development:
# DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"

# GitHub OAuth Credentials
# Enable GitHub authentication, register an OAuth app on GitHub
# (https://github.com/settings/developers) and add the Client ID and Client Secret here.
AUTH_GITHUB_ID=""
AUTH_GITHUB_SECRET=""